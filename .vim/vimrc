" Enable CtrlP plugin
" Follow installation guide http://kien.github.io/ctrlp.vim/#installation
set runtimepath^=~/.vim/bundle/ctrlp.vim

" Setup vim-plug https://github.com/junegunn/vim-plug
call plug#begin('$HOME/.vim/plugged')

" Universel Grepper
Plug 'mhinz/vim-grepper'

" Reasonable defaults
Plug 'tpope/vim-sensible'

" Git management
Plug 'tpope/vim-fugitive'

" Comment via gcc or gc<motion>
Plug 'tpope/vim-commentary'

" Change surrounding via cs)
Plug 'tpope/vim-surround'

" Useful toggles, move along quickfix list, etc
Plug 'tpope/vim-unimpaired'

" Netrw manager without header
Plug 'tpope/vim-vinegar'

" Extended % operator
Plug 'https://github.com/adelarsq/vim-matchit'

" Dark theme with barely visible comments
Plug 'arcticicestudio/nord-vim'

" Python indentation
Plug 'vim-scripts/indentpython.vim'

" Flake 8 check via F7
Plug 'nvie/vim-flake8'

" LaTeX mode
Plug 'vim-latex/vim-latex'

" Highlight/delete trailing whitespace
Plug 'ntpeters/vim-better-whitespace'

" Manage tags
Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'

" Most recently used files
Plug 'yegappan/mru'

" Deal with indentation objects (ai, ii, aI, iI)
Plug 'michaeljsmith/vim-indent-object'

" TOML syntax highlight
Plug 'cespare/vim-toml'

" Omni completion for C#
Plug 'OmniSharp/omnisharp-vim'

call plug#end()

" No vi compatibility
set nocompatible

" Allow to switch between buffers without saving
set hidden

augroup nord-overrides
  autocmd!
  autocmd ColorScheme nord highlight Folded ctermfg=14 cterm=italic
augroup END
colorscheme nord

" Scrolling - leave one line
set scrolloff=1

" Enable folding
set foldmethod=indent

" Unfold everything when opening buffer
set foldlevel=99

" Support unicode
set encoding=utf-8

" Working by default on Windows OS :(
set ffs=dos,unix

" Statusline
set statusline=
set statusline+=\ %f\ 
set statusline+=%*
set statusline+=\ %h%m%r%{FugitiveStatusline()}
set statusline+=%=
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\ [%{&fileformat}\]
set statusline+=\ %-6.(%l:%c%V%)
set statusline+=\ %p%%
set statusline+=\ 

" Mappings for tabs
nnoremap <leader><Tab> <Esc>:tabnext<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Different cursor shapes (not in cmd)
" in normal mode (block)
" and insert mode (vertical bar)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if &term =~ "xterm"
    let &t_SI = "\e[6 q"
    let &t_EI = "\e[2 q"

    " optional reset cursor on start:
    augroup myCmds
    au!
    autocmd VimEnter * silent !echo -ne "\e[2 q"
    augroup END
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Setup wildmenu
set wildmode=longest:list,full
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

set lazyredraw          " redraw only when we need to (not during macro recording)

" jf is escape from insert mode
inoremap jf <esc>

" show the matching part of the pair for [] {} and ()
set showmatch

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Fortran
"""""""""""""""""""""""""""""""""""""""""""""""""""
let fortran_free_source=1
let fortran_do_enddo=1
au BufRead,BufNewFile *.f95 setlocal bs=2
au BufRead,BufNewFile *.f95 setlocal ignorecase
au BufRead,BufNewFile *.f95 setlocal smartcase


"""""""""""""""""""""""""""""""""""""""""""""""""""
" CtrlP Setup
"""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }
" ignore files in gitignore
let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" Exclude from CtrlP most recent files
let g:ctrlp_mruf_exclude = '*COMMIT*'
let g:ctrlp_mruf_case_sensitive = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Tags setup
"""""""""""""""""""""""""""""""""""""""""""""""""""
" Ignore files in gitignore
let g:gutentags_file_list_command = {
    \ 'markers': {
        \ '.git': 'git ls-files',
        \ '.hg': 'hg files',
        \ },
    \ }

" setup tagbar
nmap <F8> :TagbarToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""
" russian keymap (switch via C-^)
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0

" spellchecking languages
set spelllang=en_us,ru


"""""""""""""""""""""""""""""""""""""""""""""""""""
" Most recent files setup
"""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <leader>fr :MRU<CR>
let MRU_Exclude_Files = '^c:\\temp\\.*\|^d:\\temp\\.*\|.git\\.*'
let MRU_Max_Menu_Entries = 15

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""
" command to change dir to current file
command CDC cd %:p:h

" change dir to current file path
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
" change local dir (this window only) to current file path
nnoremap <leader>lcd :lcd %:p:h<CR>:pwd<CR>
" echo current path
nnoremap <leader>pwd :pwd<CR>

" Delete buffer without closing split
command Bd bp\|bd \#
nnoremap <leader>bd :Bd<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""
" LaTeX
"""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd BufEnter *.tex :setlocal filetype=tex shiftwidth=2
" let g:tex_flavor = 'latex'
" let g:Tex_CompileRule_pdf='latexmk -pdf $*'
let g:Tex_ViewRule_pdf='SumatraPDF.exe $*'
let Tex_FoldedSections=""
let Tex_FoldedEnvironments="figure,table"
let Tex_FoldedMisc=""


"""""""""""""""""""""""""""""""""""""""""""""""""""
" Grepper
"""""""""""""""""""""""""""""""""""""""""""""""""""
let g:grepper = {}            " initialize g:grepper with empty dictionary
runtime plugin/grepper.vim    " initialize g:grepper with default values

let g:grepper.dir = 'repo,file'
let g:grepper.repo = ['.git', '.hg', '.svn']

let g:grepper.tools =
  \ ['git', 'ag', 'ack', 'ack-grep', 'grep', 'findstr', 'rg', 'pt', 'sift']

nnoremap <leader>g :Grepper<cr>
let g:grepper.prompt_mapping_tool = '<leader>g'

let g:grepper.stop = 100


"""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim-Flake8
"""""""""""""""""""""""""""""""""""""""""""""""""""
let g:flake8_cmd=$HOME.'/envs/flake8/Scripts/flake8.exe'

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Omni Sharp
"""""""""""""""""""""""""""""""""""""""""""""""""""
let g:OmniSharp_server_path = "C:\\OmniSharp\\OmniSharp.exe"
let g:OmniSharp_server_stdio = 1
let g:OmniSharp_popup_mappings = {
\ 'sigNext': '<C-n>',
\ 'sigPrev': '<C-p>',
\ 'lineDown': ['<C-e>', 'j'],
\ 'lineUp': ['<C-y>', 'k']
\}

augroup omnisharp_commands
    autocmd!

    " Show type information automatically when the cursor stops moving.
    " Note that the type is echoed to the Vim command line, and will overwrite
    " any other messages in this space including e.g. ALE linting messages.
    autocmd CursorHold *.cs OmniSharpTypeLookup

    " The following commands are contextual, based on the cursor position.
    autocmd FileType cs nnoremap <buffer> gd :OmniSharpGotoDefinition<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fi :OmniSharpFindImplementations<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fs :OmniSharpFindSymbol<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>fu :OmniSharpFindUsages<CR>

    " Finds members in the current buffer
    autocmd FileType cs nnoremap <buffer> <Leader>fm :OmniSharpFindMembers<CR>

    autocmd FileType cs nnoremap <buffer> <Leader>fx :OmniSharpFixUsings<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>tt :OmniSharpTypeLookup<CR>
    autocmd FileType cs nnoremap <buffer> <Leader>dc :OmniSharpDocumentation<CR>
    autocmd FileType cs nnoremap <buffer> <C-\> :OmniSharpSignatureHelp<CR>
    autocmd FileType cs inoremap <buffer> <C-\> <C-o>:OmniSharpSignatureHelp<CR>

    " Navigate up and down by method/property/field
    autocmd FileType cs nnoremap <buffer> <C-k> :OmniSharpNavigateUp<CR>
    autocmd FileType cs nnoremap <buffer> <C-j> :OmniSharpNavigateDown<CR>

    " Find all code errors/warnings for the current solution and populate the quickfix window
    autocmd FileType cs nnoremap <buffer> <Leader>cc :OmniSharpGlobalCodeCheck<CR>
augroup END
