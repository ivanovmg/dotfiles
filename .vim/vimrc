" Setup vim-plug https://github.com/junegunn/vim-plug
call plug#begin('$HOME/.vim/plugged')

" Reasonable defaults
Plug 'tpope/vim-sensible'

" Git management
Plug 'tpope/vim-fugitive'

" Comment via gcc or gc<motion>
Plug 'tpope/vim-commentary'

" Change surrounding via cs)
Plug 'tpope/vim-surround'

" Useful toggles, move along quickfix list, etc
Plug 'tpope/vim-unimpaired'

" Netrw manager without header
Plug 'tpope/vim-vinegar'

" Python indentation
Plug 'vim-scripts/indentpython.vim', {'for': 'python'}

" Highlight/delete trailing whitespace
Plug 'ntpeters/vim-better-whitespace'

" TOML syntax highlight
Plug 'cespare/vim-toml'

Plug 'dense-analysis/ale', { 'on':  'ALEToggle' }

Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'

source ~/.vim/plugins/prettier.vim
source ~/.vim/plugins/ctrlp.vim
source ~/.vim/plugins/gutentags.vim
source ~/.vim/plugins/flake8.vim
source ~/.vim/plugins/pydoc.vim
source ~/.vim/plugins/latex.vim
source ~/.vim/plugins/nordtheme.vim
source ~/.vim/plugins/grepper.vim
source ~/.vim/plugins/editorconfig.vim

call plug#end()

doautocmd User PlugLoaded

source ~/.vim/plugins/statusline.vim

" No vi compatibility
set nocompatible

" Allow to switch between buffers without saving
set hidden

" Scrolling - leave one line
set scrolloff=1

" Enable folding
set foldmethod=indent

" Unfold everything when opening buffer
set foldlevel=99

" Support unicode
set encoding=utf-8

function GuessOS()
	let uname = substitute(system('uname'), '\n', '', '')
	"Example values: Linux, Darwin, MINGW64_NT-10.0, MINGW32_NT-6.1

	if uname == 'Linux' || uname == 'Darwin'
		return 'unix'
	else " windows
		return 'windows'
	endif
endfunction

if GuessOS() == 'unix'
	set ffs=unix
else
	set ffs=dos
endif

" width of tabulation
set tabstop=4
set shiftwidth=4

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Different cursor shapes (not in cmd)
" in normal mode (block)
" and insert mode (vertical bar)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if &term =~ "xterm"
    let &t_SI = "\e[6 q"
    let &t_EI = "\e[2 q"

    " optional reset cursor on start:
    augroup myCmds
    au!
    autocmd VimEnter * silent !echo -ne "\e[2 q"
    augroup END
endif



""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Setup wildmenu
set wildmode=longest:list,full
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

set lazyredraw          " redraw only when we need to (not during macro recording)

" jf is escape from insert mode
inoremap jf <esc>

" show the matching part of the pair for [] {} and ()
set showmatch

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""
" russian keymap (switch via C-^)
set keymap=russian-jcukenwin
set iminsert=0
set imsearch=0

" spellchecking languages
set spelllang=en_us,ru


"""""""""""""""""""""""""""""""""""""""""""""""""""
" Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""
" command to change dir to current file
command CDC cd %:p:h

" change dir to current file path
nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
" change local dir (this window only) to current file path
nnoremap <leader>lcd :lcd %:p:h<CR>:pwd<CR>
" echo current path
nnoremap <leader>pwd :pwd<CR>

" Delete buffer without closing split
command Bd bp\|bd \#
nnoremap <leader>bd :Bd<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""
" Snippets
"""""""""""""""""""""""""""""""""""""""""""""""""""
let g:snipMate = { 'snippet_version' : 1 }

map <F11> <Esc>:call libcallnr("gvimfullscreen.dll", "ToggleFullScreen", 0)<CR>
